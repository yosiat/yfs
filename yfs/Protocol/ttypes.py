#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class ChunkReadRequest:
  """
  ChunkReadRequest and ChunkReadResponse are callled
  at the very begining of the binary read chunk protocol.

  Attributes:
   - chunkHandle
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'chunkHandle', None, None, ), # 1
    (2, TType.I32, 'offset', None, 0, ), # 2
  )

  def __init__(self, chunkHandle=None, offset=thrift_spec[2][4],):
    self.chunkHandle = chunkHandle
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.chunkHandle = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChunkReadRequest')
    if self.chunkHandle is not None:
      oprot.writeFieldBegin('chunkHandle', TType.BYTE, 1)
      oprot.writeByte(self.chunkHandle)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 2)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChunkReadResponse:
  """
  Attributes:
   - chunkHandle
   - offset
   - checksum
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'chunkHandle', None, None, ), # 1
    (2, TType.I32, 'offset', None, 0, ), # 2
    (3, TType.STRING, 'checksum', None, None, ), # 3
  )

  def __init__(self, chunkHandle=None, offset=thrift_spec[2][4], checksum=None,):
    self.chunkHandle = chunkHandle
    self.offset = offset
    self.checksum = checksum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.chunkHandle = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.checksum = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChunkReadResponse')
    if self.chunkHandle is not None:
      oprot.writeFieldBegin('chunkHandle', TType.BYTE, 1)
      oprot.writeByte(self.chunkHandle)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I32, 2)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    if self.checksum is not None:
      oprot.writeFieldBegin('checksum', TType.STRING, 3)
      oprot.writeString(self.checksum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HeartbeatResposne:
  """
  Attributes:
   - totalDiskSpace
   - usedDiskSpace
   - freeDiskSpace
   - chunkHandleToReadCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'totalDiskSpace', None, None, ), # 1
    (2, TType.DOUBLE, 'usedDiskSpace', None, None, ), # 2
    (3, TType.DOUBLE, 'freeDiskSpace', None, None, ), # 3
    (4, TType.MAP, 'chunkHandleToReadCount', (TType.BYTE,None,TType.I64,None), None, ), # 4
  )

  def __init__(self, totalDiskSpace=None, usedDiskSpace=None, freeDiskSpace=None, chunkHandleToReadCount=None,):
    self.totalDiskSpace = totalDiskSpace
    self.usedDiskSpace = usedDiskSpace
    self.freeDiskSpace = freeDiskSpace
    self.chunkHandleToReadCount = chunkHandleToReadCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.totalDiskSpace = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.usedDiskSpace = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.freeDiskSpace = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.chunkHandleToReadCount = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readByte();
            _val6 = iprot.readI64();
            self.chunkHandleToReadCount[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HeartbeatResposne')
    if self.totalDiskSpace is not None:
      oprot.writeFieldBegin('totalDiskSpace', TType.DOUBLE, 1)
      oprot.writeDouble(self.totalDiskSpace)
      oprot.writeFieldEnd()
    if self.usedDiskSpace is not None:
      oprot.writeFieldBegin('usedDiskSpace', TType.DOUBLE, 2)
      oprot.writeDouble(self.usedDiskSpace)
      oprot.writeFieldEnd()
    if self.freeDiskSpace is not None:
      oprot.writeFieldBegin('freeDiskSpace', TType.DOUBLE, 3)
      oprot.writeDouble(self.freeDiskSpace)
      oprot.writeFieldEnd()
    if self.chunkHandleToReadCount is not None:
      oprot.writeFieldBegin('chunkHandleToReadCount', TType.MAP, 4)
      oprot.writeMapBegin(TType.BYTE, TType.I64, len(self.chunkHandleToReadCount))
      for kiter7,viter8 in self.chunkHandleToReadCount.items():
        oprot.writeByte(kiter7)
        oprot.writeI64(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ChunkLocation:
  """
  Attributes:
   - chunkHandle
   - chunkServerIP
   - chunkServerPort
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'chunkHandle', None, None, ), # 1
    (2, TType.STRING, 'chunkServerIP', None, None, ), # 2
    (3, TType.I32, 'chunkServerPort', None, None, ), # 3
  )

  def __init__(self, chunkHandle=None, chunkServerIP=None, chunkServerPort=None,):
    self.chunkHandle = chunkHandle
    self.chunkServerIP = chunkServerIP
    self.chunkServerPort = chunkServerPort

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.chunkHandle = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.chunkServerIP = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.chunkServerPort = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ChunkLocation')
    if self.chunkHandle is not None:
      oprot.writeFieldBegin('chunkHandle', TType.BYTE, 1)
      oprot.writeByte(self.chunkHandle)
      oprot.writeFieldEnd()
    if self.chunkServerIP is not None:
      oprot.writeFieldBegin('chunkServerIP', TType.STRING, 2)
      oprot.writeString(self.chunkServerIP)
      oprot.writeFieldEnd()
    if self.chunkServerPort is not None:
      oprot.writeFieldBegin('chunkServerPort', TType.I32, 3)
      oprot.writeI32(self.chunkServerPort)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class NewChunkServerRequest:
  """
  Attributes:
   - fileNameToChunkHandles: File name to chunks, for example:
  - yosy.txt - 1,3,4
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'fileNameToChunkHandles', (TType.STRING,None,TType.LIST,(TType.BYTE,None)), None, ), # 1
  )

  def __init__(self, fileNameToChunkHandles=None,):
    self.fileNameToChunkHandles = fileNameToChunkHandles

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.fileNameToChunkHandles = {}
          (_ktype10, _vtype11, _size9 ) = iprot.readMapBegin()
          for _i13 in xrange(_size9):
            _key14 = iprot.readString();
            _val15 = []
            (_etype19, _size16) = iprot.readListBegin()
            for _i20 in xrange(_size16):
              _elem21 = iprot.readByte();
              _val15.append(_elem21)
            iprot.readListEnd()
            self.fileNameToChunkHandles[_key14] = _val15
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('NewChunkServerRequest')
    if self.fileNameToChunkHandles is not None:
      oprot.writeFieldBegin('fileNameToChunkHandles', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.fileNameToChunkHandles))
      for kiter22,viter23 in self.fileNameToChunkHandles.items():
        oprot.writeString(kiter22)
        oprot.writeListBegin(TType.BYTE, len(viter23))
        for iter24 in viter23:
          oprot.writeByte(iter24)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
